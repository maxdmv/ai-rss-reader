
import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import { fetchAllFeeds } from './lib/rss.js';
import { clusterItems } from './lib/cluster.js';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;

app.use('/public', express.static(path.join(__dirname, 'public')));

function loadConfig() {
  const p = path.join(__dirname, 'feeds.json');
  const raw = fs.readFileSync(p, 'utf8');
  const cfg = JSON.parse(raw);
  if (!Array.isArray(cfg.feeds)) throw new Error('feeds.json must have a "feeds" array');
  if (typeof cfg.aiCluster !== 'boolean') cfg.aiCluster = true;
  if (typeof cfg.similarityThreshold !== 'number') cfg.similarityThreshold = 0.78;
  if (typeof cfg.maxGroups !== 'number') cfg.maxGroups = 12;
  return cfg;
}

function escapeHtml(s) {
  return s.replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));
}

app.get('/', async (req, res) => {
  try {
    const cfg = loadConfig();
    const { items, errors } = await fetchAllFeeds(cfg.feeds, cfg.refreshSeconds || 180);

    let groupsHtml = '';
    if (cfg.aiCluster) {
      const clusters = await clusterItems(items, cfg.similarityThreshold);
      // Keep largest clusters first
      clusters.sort((a, b) => b.items.length - a.items.length);
      const limited = clusters.slice(0, cfg.maxGroups);

      groupsHtml = limited.map(gr => {
        const articles = gr.items.map(item => {
          const pub = item.publishedAt ? new Date(item.publishedAt).toISOString() : '';
          const source = item.source || '';
          const summary = item.summary ? `<p>${item.summary}</p>` : '';
          const image = item.image ? `<figure><img src="${item.image}" alt=""></figure>` : '';
          return `
            <article>
              <header>
                <h3><a href="${item.link}" target="_blank" rel="noopener noreferrer">${escapeHtml(item.title)}</a></h3>
                <p><small>${pub}</small>${source ? ' <small>· ' + escapeHtml(source) + '</small>' : ''}</p>
              </header>
              ${image}
              ${summary}
            </article>
          `;
        }).join('\n');

        return `
          <section>
            <header><h2>${escapeHtml(gr.title)}</h2></header>
             
			  <input type="checkbox">
        <div class="hr"></div>			 
            ${articles}
          </section>
        `;
      }).join('\n');
    } else {
      // Fallback: flat list
      groupsHtml = items.map(item => {
        const pub = item.publishedAt ? new Date(item.publishedAt).toISOString() : '';
        const source = item.source || '';
        const summary = item.summary ? `<p>${item.summary}</p>` : '';
        const image = item.image ? `<figure><img src="${item.image}" alt=""></figure>` : '';
        return `
          <article>
            <header>
              <h2><a href="${item.link}" target="_blank" rel="noopener noreferrer">${escapeHtml(item.title)}</a></h2>
              <p><small>${pub}</small>${source ? ' <small>· ' + escapeHtml(source) + '</small>' : ''}</p>
            </header>
            ${image}
            ${summary}
          </article>
        `;
      }).join('\n');
    }

    const errorBlock = errors.length
      ? `<section><h2>Sources with errors</h2><ul>` + errors.map(e => `<li>${escapeHtml(e)}</li>`).join('') + `</ul></section>`
      : '';

    const pageTitle = (loadConfig().title || 'AI Catalogue');

    const html = fs.readFileSync(path.join(__dirname, 'views', 'layout.html'), 'utf8')
      .replace('<!--PAGE_TITLE-->', escapeHtml(pageTitle))
      .replace('<!--PAGE_BODY-->', `
        <header>
          <h1>${escapeHtml(pageTitle)}</h1>
          <nav>
            <a href="/">Home</a>
            <a href="/sources">Sources</a>
          </nav>
        </header>
        <main>
        
          ${groupsHtml}
          
          ${errorBlock}
        </main>
        <footer>
          <p>Generated by Minimal RSS Reader (AI catalogue)</p>
        </footer>
      `);

    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    res.send(html);
  } catch (err) {
    res.status(500).send(String(err));
  }
});

app.get('/sources', (req, res) => {
  try {
    const cfg = loadConfig();
    const html = fs.readFileSync(path.join(__dirname, 'views', 'layout.html'), 'utf8')
      .replace('<!--PAGE_TITLE-->', 'Sources')
      .replace('<!--PAGE_BODY-->', `
        <header>
          <h1>Sources</h1>
          <nav>
            <a href="/">Home</a>
            <a href="/sources">Sources</a>
          </nav>
        </header>
        <main>
          <section>
            <h2>Configured feeds</h2>
            <ol>
              ${cfg.feeds.map(u => `<li><a href="${u}" target="_blank" rel="noopener noreferrer">${u}</a></li>`).join('')}
            </ol>
            <section>
              <h2>AI Grouping</h2>
              <p>Enabled: ${cfg.aiCluster ? 'yes' : 'no'}</p>
              <p>Similarity threshold: ${cfg.similarityThreshold}</p>
              <p>Max groups: ${cfg.maxGroups}</p>
            </section>
          </section>
        </main>
        <footer><p>Generated by Minimal RSS Reader (AI catalogue)</p></footer>
      `);
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    res.send(html);
  } catch (err) {
    res.status(500).send(String(err));
  }
});

app.listen(PORT, () => {
  console.log(`Listening on http://localhost:${PORT}`);
});
